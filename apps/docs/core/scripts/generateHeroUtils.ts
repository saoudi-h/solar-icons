import metadata from '@solar-icons/core/metadata.json' assert { type: 'json' }
import fs from 'node:fs'

const toPascalCase = (str: string) =>
    str
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join('')

const outputFilePath = './core/generated/generatedHeroUtils.ts'
const categoryList: string[] = []

const generateIconsByCategory = (data: any) => {
    const categories = data.categories
    let output = `
/* Generated by generateUtils.ts */
import { solar } from '@solar-icons/react'

export const styles = ['Broken', 'Outline', 'Linear', 'Bold', 'LineDuotone', 'BoldDuotone'] as const
export type Style = (typeof styles)[number]

export const getIconsByCategory = (category: string) => {
  switch (category) {
`

    Object.entries(categories).forEach(([categoryName, categoryData]: [string, any]) => {
        const icons = categoryData.icons

        // Check that there are at least 23 icons for the category
        if (icons.length < 23) return
        const categoryPascalCase = toPascalCase(categoryName)
        categoryList.push(categoryPascalCase)
        // Separates icons into internal (10) and external (13)
        const innerIcons = icons
            .slice(0, 10)
            .map((icon: string) => `solar.${categoryPascalCase}.${toPascalCase(icon)}`)
        const outerIcons = icons
            .slice(10, 23)
            .map((icon: string) => `solar.${categoryPascalCase}.${toPascalCase(icon)}`)

        // Generate the typescript code for each category
        output += `
    case '${categoryPascalCase}':
      return {
        inner: [
          ${innerIcons.join(',\n          ')}
        ],
        outer: [
          ${outerIcons.join(',\n          ')}
        ],
      };
`
    })

    // Complete the switch and export the default function
    output += `
    default:
      return {
        inner: [],
        outer: [],
      };
  }
}
`
    // add categories as exported const array
    output += `export const categories = ${JSON.stringify(categoryList)} as const\n`

    // export Category type based on categories
    output += 'export type Category = typeof categories[number]'

    return output
}

// Main function to read JSON file and write generated TypeScript file
const main = async () => {
    try {
        const outputContent = generateIconsByCategory(metadata)
        fs.writeFileSync(outputFilePath, outputContent)
        console.log('The TypeScript file was generated successfully !')
    } catch (error) {
        console.error('Error generating file :', error)
    }
}

main()
